package com.marakana.contacts.repositories;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.marakana.contacts.entities.Address;

public class AddressRepository {

	private final DataSource ds;

	public AddressRepository() {
		try {
			Context context = new InitialContext();
			try {
				ds = (DataSource) context
						.lookup("java:comp/env/jdbc/trainingdb");
			} finally {
				context.close();
			}
		} catch (NamingException e) {
			throw new RuntimeException(e);
		}

	}

	public void init() throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql = "CREATE TABLE address (id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
						+ "street VARCHAR (255), "
						+ "city VARCHAR (255), "
						+ "state VARCHAR (255), " + "zip VARCHAR (255))";
				statement.execute(sql);
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public Address find(long id) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				ResultSet results = statement
						.executeQuery("SELECT * FROM address WHERE id = " + id);
				try {
					if (!results.next()) {
						return null;
					} else {
						return unmarshal(results);
					}
				} finally {
					results.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public void create(Address address) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql = "INSERT INTO address (street, city, state, zip) VALUES ('"
						+ address.getStreet()
						+ "', '"
						+ address.getCity()
						+ "', '"
						+ address.getState()
						+ "', '"
						+ address.getZip() + "')";
				statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next()) {
						address.setId(generatedKeys.getLong("id"));
					}
				} finally {
					generatedKeys.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public void update(Address address) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql = "UPDATE address SET street = '"
						+ address.getStreet() + "', city = '"
						+ address.getCity() + "', state = '"
						+ address.getState() + "', zip = '" + address.getZip()
						+ "' WHERE id = " + address.getId() + "";
				statement.executeUpdate(sql);
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public void delete(Address address) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql = "DELETE FROM address WHERE id = " + address.getId();
				statement.executeUpdate(sql);
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	private static Address unmarshal(ResultSet results) throws SQLException {
		Address address = new Address();
		address.setId(results.getLong("id"));
		address.setState(results.getString("street"));
		address.setCity(results.getString("city"));
		address.setState(results.getString("state"));
		address.setZip(results.getString("zip"));
		return address;
	}

}
